import java.util.HashMap;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        HashMap<Integer, Integer> inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

      
        return buildSubtree(postorder, inorderMap, 0, inorder.length - 1, postorder.length - 1);
    }

    private TreeNode buildSubtree(int[] postorder, HashMap<Integer, Integer> inorderMap,
                                  int inStart, int inEnd, int postIndex) {
  
        if (inStart > inEnd) {
            return null;
        }

        int rootVal = postorder[postIndex];
        TreeNode root = new TreeNode(rootVal);

        int rootIndex = inorderMap.get(rootVal);

        root.right = buildSubtree(postorder, inorderMap, rootIndex + 1, inEnd, postIndex - 1);
        root.left = buildSubtree(postorder, inorderMap, inStart, rootIndex - 1,
                                  postIndex - (inEnd - rootIndex) - 1);

        return root;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

       
        int[] inorder1 = {9, 3, 15, 20, 7};
        int[] postorder1 = {9, 15, 7, 20, 3};
        TreeNode tree1 = solution.buildTree(inorder1, postorder1);
        printTree(tree1); // Output: [3, 9, 20, null, null, 15, 7]

        int[] inorder2 = {-1};
        int[] postorder2 = {-1};
        TreeNode tree2 = solution.buildTree(inorder2, postorder2);
        printTree(tree2); // Output: [-1]
    }

    private static void printTree(TreeNode root) {
        if (root == null) {
            System.out.println("[]");
            return;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        List<String> result = new ArrayList<>();
        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (node != null) {
                result.add(String.valueOf(node.val));
                queue.add(node.left);
                queue.add(node.right);
            } else {
                result.add("null");
            }
        }

        int i = result.size() - 1;
        while (i >= 0 && result.get(i).equals("null")) {
            result.remove(i);
            i--;
        }

        System.out.println(result);
    }
}
